import React, { useEffect, useRef, useState } from 'react';

import css from './Modal.module.css';

/*
  componenDidMount - –º–µ—Ç–æ–¥ –∂–∏—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É, —â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –æ–¥–∏–Ω
                     —Ä–∞–∑ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–ª–∞—Å—è.
  –î–ª—è —á–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å:
    - –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å –º–µ—Ä–µ–∂–µ–≤—ñ –∑–∞–ø–∏—Ç–∏.
    - –∑—á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞.
    - –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ñ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π (window.addEventListener)
    - –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å—Å—è setTimeout, setInterval.

  componentWillUnmount - –º–µ—Ç–æ–¥ –∂–∏—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É, —â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –æ–¥–∏–Ω
                     —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Ç–∏, —è–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–∏—Ç—å—Å—è –∑ DOM-–¥–µ—Ä–µ–≤–∞.
  –î–ª—è —á–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å:
    - –≤—ñ–¥—Ö–∏–ª—è—Ç–∏ –º–µ—Ä–µ–∂–µ–≤—ñ –∑–∞–ø–∏—Ç–∏.
    - –ø—Ä–∏–±–∏—Ä–∞—é—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ñ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π (window.removeEventListener)
    - –æ—á–∏—â—É—é—Ç—å—Å—è clearTimeout, clearInterval.
  
  componentDidUpdate - –º–µ—Ç–æ–¥ –∂–∏—Ç—î–≤–æ–≥–æ —Ü–∏–∫–ª—É, —â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–∂–µ–Ω —Ä–∞–∑
                    –ø—ñ–ª—Å—è —Ç–æ–≥–æ, —è–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–Ω–æ–≤–∏–ª–∞—Å—è(–∑–º—ñ–Ω–∏–ª–∏—Å—è –ø—Ä–æ–ø—Å–∏, –∞–±–æ —Å—Ç–∞–Ω).
  –î–ª—è —á–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å:
    - –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å –º–µ—Ä–µ–∂–µ–≤—ñ –∑–∞–ø–∏—Ç–∏.
    - –æ–Ω–æ–≤–ª—é—Ç—å—Å—è(—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—é—Ç—å—Å—è) —Å—Ç–µ–π—Ç –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º —Å—Ö–æ–≤–∏—â–µ–º.
    - –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î—Ç—å—Å—è —è–∫–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å—Ç–∞–Ω—É, –∞–±–æ –ø—Ä–æ–ø—Å—ñ–≤ –∑–º—ñ–Ω–∏–ª–∞—Å—è (prevState.isModalOpen !=== this.state.isModalOpen)
*/

// export class Modal extends Component {

//   handleOverlayClick = (event) => {
//     if(event.target === event.currentTarget) {
//       this.props.handleCloseModal();
//     }
//   }

//   handleKeyPress = (event) => {
//     if(event.code === "Escape") {
//       this.props.handleCloseModal();
//     }
//   }

//   componentDidMount() {
//     document.body.style.overflow = "hidden";

//     window.addEventListener("keydown", this.handleKeyPress)
//   }

//   componentWillUnmount() {
//     document.body.style.overflow = "auto";

//     window.removeEventListener("keydown", this.handleKeyPress)
//   }

//   render() {
//     return (
//       <div className={css.overlay} onClick={this.handleOverlayClick}>
//         <div className={css.modal}>
//           <button onClick={this.props.handleCloseModal} className={css.closeModalBtn}>&times;</button>
//           <h2>Profile Details</h2>
//           <p>Profile Name: {this.props.modalData.name}</p>
//           <p>Profile Age: {this.props.modalData.age}</p>
//           <p>Is profile favourite?: {this.props.modalData.isFavourite ? '‚ù§' : 'ü§∑‚Äç‚ôÇÔ∏è'} </p>
//         </div>
//       </div>
//     );
//   }
// }

// const button = document.querySelector('.close-modal-btn')
// button.style.width = '500px';
// button.textContent = "Close Modal";
// button.focus();


export const Modal = ({ handleCloseModal, modalData }) => {
  const [clickCounter, setClickCounter] = useState(0);
  const [tabPanel, setTabPanel] = useState('users'); // "users" | "groups" | "comments"
  const buttonRef = useRef();
  const inputRef = useRef();
  const isFirstRenderRef = useRef(true);

  const handleOverlayClick = event => {
    if (event.target === event.currentTarget) {
      handleCloseModal();
    }
  };

  useEffect(() => {
    const handleKeyPress = event => {
      if (event.code === 'Escape') {
        handleCloseModal();
      }
    };

    document.body.style.overflow = 'hidden';
    window.addEventListener('keydown', handleKeyPress);

    return () => {
      document.body.style.overflow = 'auto';
      window.removeEventListener('keydown', handleKeyPress);
    };
  }, [handleCloseModal]);

  useEffect(() => {
    if(!isFirstRenderRef.current) {
      console.log('Tab panel: ' + tabPanel)
    }

    return () => isFirstRenderRef.current = false
  }, [tabPanel])

  useEffect(() => {
    inputRef.current.focus();
  }, [])

  const handleCounterClick = () => {
    setClickCounter(prevState => prevState + 1);
    // console.log(buttonRef.current.textContent);
    inputRef.current.focus();
  };

  return (
    <div className={css.overlay} onClick={handleOverlayClick}>
      <div className={css.modal}>
        <button onClick={handleCloseModal} className={css.closeModalBtn}>
          &times;
        </button>
        <br />
        <br />
        <p>Click counter: {clickCounter}</p>
        <button ref={buttonRef} onClick={handleCounterClick}>Change counter</button>
        <br />
        <br />
        <label >
          <span>Some text input</span>
          <input type="text" ref={inputRef} placeholder='Hello fson93' />
        </label>
        <br />
        <button onClick={() => setTabPanel('users')}>Users</button>
        <button onClick={() => setTabPanel('groups')}>Groups</button>
        <button onClick={() => setTabPanel('comments')}>Comments</button>

        {tabPanel === 'users' && (
          <>
            <h2>Profile Details</h2>
            <p>Profile Name: {modalData.name}</p>
            <p>Profile Age: {modalData.age}</p>
            <p>Is profile favourite?: {modalData.isFavourite ? '‚ù§' : 'ü§∑‚Äç‚ôÇÔ∏è'} </p>
          </>
        )}
        {tabPanel === 'groups' && <p>Here goes some groups</p>}
        {tabPanel === 'comments' && <p>Here goes comments!!</p>}
      </div>
    </div>
  );
};
